@using BoardCommon.Enums
@using BoardCommon.Models
@using Board.Infrastructure
<div class="container">
    <div class="row my-2 justify-content-center">
        <div class="col-md-auto">
            <div class="btn-group">
                <button type="button" class="btn btn-light dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    Категории
                </button>
                <ul class="dropdown-menu">
                    @foreach (var category in Categories.Enumerated)
                    {
                        <li>
                            <button class="dropdown-item" @onclick="() => CategorySelected(category)">
                                <img src="icons/" alt="">@category
                            </button>
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="col-sm-8">
            <form class="row" @onsubmit="SearchAdsWithSelectedTitle">
                <input @bind-value="SearchTitle" class="col mx-auto form-control" type="search" placeholder="Search" aria-label="Search">
                <button @onclick="@SearchAdsWithSelectedTitle" class="col-sm-auto mx-2 btn btn-outline-success" type="button">Search</button>
            </form>
        </div>
    </div>

</div>
<AdsViewer Ads="@Ads"></AdsViewer>

@inject AdsRepository _repository;

@code
{
    public List<Ad> Ads { get; set; } = new();
    private string SearchTitle { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Ads.AddRange(await _repository.GetPopularAsync(0, 21));

        async void AdsUpdater(object sender, LocationChangedEventArgs args)
        {
            if (args.Location == NavigationManager.Uri)
            {
                Ads = (await _repository.GetPopularAsync()).ToList();
                StateHasChanged();
            }
            else
                NavigationManager.LocationChanged -= AdsUpdater;
        }

        NavigationManager.LocationChanged += AdsUpdater;
    }

    public async Task CategorySelected(string category)
    {
        Ads = (await _repository.GetWithCategory(category)).ToList();
    }

    public async Task SearchAdsWithSelectedTitle()
    {
        if (string.IsNullOrEmpty(SearchTitle?.Trim()))
        {
            Ads = new(await _repository.GetPopularAsync(0, 21));
        }
        else
            Ads = (await _repository.SearchWithTitle(SearchTitle)).ToList();
    }
}